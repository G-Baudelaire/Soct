//
// Created by Germain Jones on 25/02/2024.
//

%{
#include "../abstract_syntax_tree/nodes.h"
#include <list>

using namespace std;
Program *root;
list<Channel*> *channel_list;
extern int yyerror(char *s);
extern int yylex(void);

%}

%start PROGRAM

%union {
char *channel_id;
Agent *agent;
SoloObjects *solo_objects;
Inaction *inaction;
Solo *solo;
Send *send;
Receive *receive;
ReplicatedReceive *replicated_receive;
Composition *composition;
Bind *bind;
Match *match;
list<Channel *> *channels;
list<Agent *> *agents;
Program *program;
}

%token CHANNEL
%token RUN
%token BIND
%token COMMA
%token MATCH
%token LPARENTHESES
%token RPARENTHESES
%token LBRACKET
%token RBRACKET
%token SEND
%token REPLICATED_RECEIVE
%token RECEIVE
%left COMPOSITION         /* Specify left associativity for '|' */

/* types */
%type <channel_id> CHANNEL
%type <agent> AGENT
%type <agent> EXPRESSION
%type <solo_objects> SOLO_OBJECTS
%type <inaction> INACTION
%type <solo> SOLO
%type <send> SEND
%type <receive> RECEIVE
%type <replicated_receive> REPLICATED_RECEIVE
%type <composition> COMPOSITION
%type <bind> BIND
%type <match> MATCH
%type <channels> INNER_LIST
%type <channels> LIST
%type <agents> EXPRESSION_LIST
%type <program> PROGRAM

%%/* Grammar rules and actions follow */

PROGRAM: /* empty */ { printf("Program Start:\n");
                       $$ = new Program(new list<Agent *>());
                       root = $$; }
       | EXPRESSION_LIST { printf("Program Start:\n");
                           $$ = new Program($1);
                           root = $$; }
;

EXPRESSION_LIST: RUN EXPRESSION { $$ = new list<Agent *>();
                                  $$->push_back($2); }
               | EXPRESSION_LIST RUN EXPRESSION { $$ = $1;
                                                 $$->push_back($3); }
;

INACTION: LPARENTHESES RPARENTHESES { $$ = new Inaction(); }
;

SOLO_OBJECTS: LIST { $$ = new SoloObjects($1); }
            | CHANNEL { channel_list = new list<Channel *>();
                        channel_list->push_back(new Channel($1));
                        $$ = new SoloObjects(channel_list);}
;

SOLO: CHANNEL SEND SOLO_OBJECTS { $$ = new Send(new Channel($1), $3); }
    | CHANNEL RECEIVE SOLO_OBJECTS { $$ = new Receive(new Channel($1), $3); }
    | CHANNEL REPLICATED_RECEIVE SOLO_OBJECTS { $$ = new ReplicatedReceive(new Channel($1), $3); }
;

EXPRESSION: LPARENTHESES AGENT RPARENTHESES { $$ = $2; }
;

AGENT: INACTION { $$ = $1; }
     | SOLO { $$ = $1; }
     | AGENT COMPOSITION AGENT { $$ = new Composition($1,$3); }
     | BIND LIST EXPRESSION { $$ = new Bind($2, $3); }
     | MATCH LIST LIST EXPRESSION { $$ = new Match($2, $3, $4); }
;

INNER_LIST: CHANNEL { $$ = new list<Channel *>();
                      $$ ->push_back(new Channel($1)); }
          | INNER_LIST COMMA CHANNEL { $$ = $1;
                                       $1->push_back(new Channel($3)); }
;

LIST: LBRACKET RBRACKET { $$ = new list<Channel*>(); }
    | LBRACKET INNER_LIST RBRACKET { $$ = $2; }
;
%%